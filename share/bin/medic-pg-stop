#!/usr/bin/env bash

# Stops postgres using pg_ctl.
#
# Pass '-q' option if you don't want it to complain when it thinks postgres is not running.

source "$(brew --prefix)/share/medic-bash/cecho.bash"
source "$(brew --prefix)/share/medic-bash/confirm.bash"
source "$(brew --prefix)/share/medic-bash/step.bash"

pgdir="${PG_ROOT:-"$(pwd)/priv/postgres"}"
datadir="${pgdir}/data"
QUIET=false
YES=false

while [[ $# -gt 0 ]]; do
  case $1 in
    -q|--quiet)
      QUIET=true
      shift
      ;;
    -y|--yes)
      YES=true
      shift
      ;;
    -h|--help)
      usage
      exit 0
      ;;
    --*|-*)
      echo "Unknown option $1"
      exit 1
      ;;
  esac
done

usage() {
  echo "$0 [options]" >&2
  echo >&2
  echo "Options:" >&2
  echo >&2
  echo "  -q | --quiet — Run without prompts" >&2
  echo "  -y | --yes   — Automatically confirm all prompts" >&2
}

postgres_commands() {
  pgrep -fl postgres \
    | cut -f2- -d' ' \
    | grep '[/]bin/postgres' \
    | sed 's/bin\/postgres/bin\/pg_ctl/'
}

postgres_running() {
  test -n "$(postgres_commands)"
}

stop_local_postgres() {
  if test -n "$(pgrep -fl postgres | grep -v grep | grep -- "-D ${datadir}")"; then
    step "Stopping local postgres" "$(pgrep -fl postgres | grep '[/]bin/postgres -D' | grep "${datadir}" | sed 's/bin\/postgres/bin\/pg_ctl/') stop"
  else
    if ! ${QUIET}; then
      step_header "Stopping local postgres" ""
      cecho --bright-bold-red "Postgres does not seem to be running locally"
    fi
  fi
}

stop_all_postgres() {
  running=$(postgres_commands)
  oIFS="$IFS"; IFS=$'\n'
  for cmd in ${running}; do
    if ${QUIET}; then
      eval "${cmd} stop"
    else
      step "Stopping non-local postgres" "${cmd} stop"
    fi
  done
  IFS="$oIFS"
}

main() {
  stop_local_postgres

  if ${YES}; then
    stop_all_postgres
  elif postgres_running; then
    if [[ $SHLVL -le 3 && $BASH_SUBSHELL -eq 0 && "${QUIET}" != "true" ]]; then
      confirm "Stop all running postgres processes?"
      stop_all_postgres
    fi
  fi
}

main
